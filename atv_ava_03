#include <stdio.h>
#include <stdlib.h>

// Estrutura para representar um produto
typedef struct {
    int codigo;
    char descricao[50];
    int quantidade;
    float valor;
} Produto;

// Estrutura para representar um nó na lista
typedef struct Nodo {
    Produto produto;
    struct Nodo *prox;
} Nodo;

// Função para inicializar uma lista vazia
Nodo* inicializarLista() {
    return NULL;
}

// Função para adicionar um novo produto à lista de estoque
Nodo* adicionarProduto(Nodo* lista) {
    Nodo *novoNodo = (Nodo*)malloc(sizeof(Nodo));
    
    printf("Digite o código do produto: ");
    scanf("%d", &novoNodo->produto.codigo);
    printf("Digite a descrição do produto: ");
    scanf(" %[^\n]s", novoNodo->produto.descricao);
    printf("Digite a quantidade do produto: ");
    scanf("%d", &novoNodo->produto.quantidade);
    printf("Digite o valor do produto: ");
    scanf("%f", &novoNodo->produto.valor);
    
    novoNodo->prox = lista;
    return novoNodo;
}

// Função para imprimir um relatório com as informações de cada produto
void imprimirRelatorio(Nodo* lista) {
    Nodo* atual = lista;
    
    printf("\nRelatório de Produtos:\n");
    while (atual != NULL) {
        printf("Código: %d\nDescrição: %s\nQuantidade: %d\nValor: R$ %.2f\n\n",
               atual->produto.codigo, atual->produto.descricao, atual->produto.quantidade, atual->produto.valor);
        atual = atual->prox;
    }
}

// Função para pesquisar um produto pelo código
Nodo* pesquisarProduto(Nodo* lista, int codigo) {
    Nodo* atual = lista;
    
    while (atual != NULL) {
        if (atual->produto.codigo == codigo) {
            return atual;
        }
        atual = atual->prox;
    }
    
    return NULL;
}

// Função para remover um produto do estoque
Nodo* removerProduto(Nodo* lista, int codigo) {
    Nodo *anterior = NULL;
    Nodo *atual = lista;
    
    while (atual != NULL && atual->produto.codigo != codigo) {
        anterior = atual;
        atual = atual->prox;
    }
    
    if (atual != NULL) {
        if (anterior != NULL) {
            anterior->prox = atual->prox;
        } else {
            lista = atual->prox;
        }
        free(atual);
        printf("Produto removido com sucesso.\n");
    } else {
        printf("Produto não encontrado.\n");
    }
    
    return lista;
}

// Função principal
int main() {
    Nodo* estoque = inicializarLista();
    int opcao, codigo;
    
    do {
        printf("\n1 - Adicionar Produto\n");
        printf("2 - Imprimir Relatório\n");
        printf("3 - Pesquisar Produto\n");
        printf("4 - Remover Produto\n");
        printf("0 - Sair\n");
        printf("Escolha uma opção: ");
        scanf("%d", &opcao);
        
        switch (opcao) {
            case 1:
                estoque = adicionarProduto(estoque);
                break;
            case 2:
                imprimirRelatorio(estoque);
                break;
            case 3:
                printf("Digite o código do produto: ");
                scanf("%d", &codigo);
                Nodo* resultado = pesquisarProduto(estoque, codigo);
                if (resultado != NULL) {
                    printf("\nProduto encontrado:\n");
                    printf("Código: %d\nDescrição: %s\nQuantidade: %d\nValor: R$ %.2f\n",
                           resultado->produto.codigo, resultado->produto.descricao,
                           resultado->produto.quantidade, resultado->produto.valor);
                } else {
                    printf("\nProduto não encontrado.\n");
                }
                break;
            case 4:
                printf("Digite o código do produto a ser removido: ");
                scanf("%d", &codigo);
                estoque = removerProduto(estoque, codigo);
                break;
            case 0:
                printf("Saindo do programa.\n");
                break;
            default:
                printf("Opção inválida. Tente novamente.\n");
        }
    } while (opcao != 0);
    
    // Liberar a memória alocada para a lista
    Nodo* atual = estoque;
    while (atual != NULL) {
        Nodo* proximo = atual->prox;
        free(atual);
        atual = proximo;
    }
    
    return 0;
}
